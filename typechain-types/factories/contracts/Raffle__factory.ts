/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughETHEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestedId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandommWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b506040516200198738038062001987833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508167ffffffffffffffff166101008167ffffffffffffffff16815250508263ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600063ffffffff82169050919050565b62000229816200020e565b81146200023557600080fd5b50565b60008151905062000249816200021e565b92915050565b600067ffffffffffffffff82169050919050565b6200026e816200024f565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a0162000238565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161159c620003eb6000396000818161094301526109b10152600081816106d7015261084a0152600081816106b40152610827015260008181610693015261080601526000818161065701526107ca01526000818161032c015261042901526000818161036901526103bd015261159c6000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461026a578063ca6a9ef814610295578063e55ae4e8146102c0578063fd6673f5146102fd576100dd565b806353a2c19a146101ea5780636b5264c9146102155780636e04ff0d1461022c576100dd565b80632cfcc539116100bb5780632cfcc53914610161578063320229eb1461016b5780634585e33b14610196578063473f1ddc146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f7610328565b6040516101049190610d26565b60405180910390f35b34801561011957600080fd5b50610122610350565b60405161012f9190610db8565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610f6c565b610367565b005b610169610427565b005b34801561017757600080fd5b50610180610596565b60405161018d9190610d26565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190611023565b6105a0565b005b3480156101cb57600080fd5b506101d4610763565b6040516101e191906110b1565b60405180910390f35b3480156101f657600080fd5b506101ff61078d565b60405161020c9190610d26565b60405180910390f35b34801561022157600080fd5b5061022a61079c565b005b34801561023857600080fd5b50610253600480360381019061024e9190611181565b610900565b604051610261929190611264565b60405180910390f35b34801561027657600080fd5b5061027f6109ad565b60405161028c9190610d26565b60405180910390f35b3480156102a157600080fd5b506102aa6109d5565b6040516102b79190610d26565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190611294565b6109e2565b6040516102f491906110b1565b60405180910390f35b34801561030957600080fd5b50610312610a29565b60405161031f9190610d26565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104109291906112c1565b60405180910390fd5b6104238282610a35565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610481576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561049557610494610d41565b5b600160149054906101000a900460ff1660018111156104b7576104b6610d41565b5b146104ee576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105ba60405180602001604052806000815250610900565b509050806106295747600080549050600160149054906101000a900460ff1660018111156105eb576105ea610d41565b5b6040517f584327aa000000000000000000000000000000000000000000000000000000008152600401610620939291906112ea565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561064e5761064d610d41565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610718959493929190611399565b6020604051808303816000875af1158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b9190611401565b905050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60018060146101000a81548160ff021916908360018111156107c1576107c0610d41565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161088b959493929190611399565b6020604051808303816000875af11580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190611401565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250565b600060606000600160149054906101000a900460ff16600181111561092857610927610d41565b5b6000600181111561093c5761093b610d41565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610970919061145d565b119050600080600080549050119050600080471190508380156109905750825b80156109995750815b80156109a25750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b60008082815481106109f7576109f6611491565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610a5057610a4f611491565b5b6020026020010151610a6291906114ef565b90506000808281548110610a7957610a78611491565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610b0d57610b0c610d41565b5b0217905550600067ffffffffffffffff811115610b2d57610b2c610e29565b5b604051908082528060200260200182016040528015610b5b5781602001602082028036833780820191505090505b5060009080519060200190610b71929190610c66565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b9f90611551565b60006040518083038185875af1925050503d8060008114610bdc576040519150601f19603f3d011682016040523d82523d6000602084013e610be1565b606091505b5050905080610c1c576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610cdf579160200282015b82811115610cde5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610c86565b5b509050610cec9190610cf0565b5090565b5b80821115610d09576000816000905550600101610cf1565b5090565b6000819050919050565b610d2081610d0d565b82525050565b6000602082019050610d3b6000830184610d17565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d8157610d80610d41565b5b50565b6000819050610d9282610d70565b919050565b6000610da282610d84565b9050919050565b610db281610d97565b82525050565b6000602082019050610dcd6000830184610da9565b92915050565b6000604051905090565b600080fd5b600080fd5b610df081610d0d565b8114610dfb57600080fd5b50565b600081359050610e0d81610de7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e6182610e18565b810181811067ffffffffffffffff82111715610e8057610e7f610e29565b5b80604052505050565b6000610e93610dd3565b9050610e9f8282610e58565b919050565b600067ffffffffffffffff821115610ebf57610ebe610e29565b5b602082029050602081019050919050565b600080fd5b6000610ee8610ee384610ea4565b610e89565b90508083825260208201905060208402830185811115610f0b57610f0a610ed0565b5b835b81811015610f345780610f208882610dfe565b845260208401935050602081019050610f0d565b5050509392505050565b600082601f830112610f5357610f52610e13565b5b8135610f63848260208601610ed5565b91505092915050565b60008060408385031215610f8357610f82610ddd565b5b6000610f9185828601610dfe565b925050602083013567ffffffffffffffff811115610fb257610fb1610de2565b5b610fbe85828601610f3e565b9150509250929050565b600080fd5b60008083601f840112610fe357610fe2610e13565b5b8235905067ffffffffffffffff81111561100057610fff610fc8565b5b60208301915083600182028301111561101c5761101b610ed0565b5b9250929050565b6000806020838503121561103a57611039610ddd565b5b600083013567ffffffffffffffff81111561105857611057610de2565b5b61106485828601610fcd565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109b82611070565b9050919050565b6110ab81611090565b82525050565b60006020820190506110c660008301846110a2565b92915050565b600080fd5b600067ffffffffffffffff8211156110ec576110eb610e29565b5b6110f582610e18565b9050602081019050919050565b82818337600083830152505050565b600061112461111f846110d1565b610e89565b9050828152602081018484840111156111405761113f6110cc565b5b61114b848285611102565b509392505050565b600082601f83011261116857611167610e13565b5b8135611178848260208601611111565b91505092915050565b60006020828403121561119757611196610ddd565b5b600082013567ffffffffffffffff8111156111b5576111b4610de2565b5b6111c184828501611153565b91505092915050565b60008115159050919050565b6111df816111ca565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561121f578082015181840152602081019050611204565b60008484015250505050565b6000611236826111e5565b61124081856111f0565b9350611250818560208601611201565b61125981610e18565b840191505092915050565b600060408201905061127960008301856111d6565b818103602083015261128b818461122b565b90509392505050565b6000602082840312156112aa576112a9610ddd565b5b60006112b884828501610dfe565b91505092915050565b60006040820190506112d660008301856110a2565b6112e360208301846110a2565b9392505050565b60006060820190506112ff6000830186610d17565b61130c6020830185610d17565b6113196040830184610d17565b949350505050565b6000819050919050565b61133481611321565b82525050565b600067ffffffffffffffff82169050919050565b6113578161133a565b82525050565b600061ffff82169050919050565b6113748161135d565b82525050565b600063ffffffff82169050919050565b6113938161137a565b82525050565b600060a0820190506113ae600083018861132b565b6113bb602083018761134e565b6113c8604083018661136b565b6113d5606083018561138a565b6113e2608083018461138a565b9695505050505050565b6000815190506113fb81610de7565b92915050565b60006020828403121561141757611416610ddd565b5b6000611425848285016113ec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061146882610d0d565b915061147383610d0d565b925082820390508181111561148b5761148a61142e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114fa82610d0d565b915061150583610d0d565b925082611515576115146114c0565b5b828206905092915050565b600081905092915050565b50565b600061153b600083611520565b91506115468261152b565b600082019050919050565b600061155c8261152e565b915081905091905056fea264697066735822122058a8377da83328c851d105dfedad562308b2369a192ccfe4bfe65a2196efdf4764736f6c63430008120033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gasLane: BytesLike,
    callbackGasLimit: BigNumberish,
    subscriptionId: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      callbackGasLimit,
      subscriptionId,
      interval,
      overrides || {}
    );
  }
  override deploy(
    vrfCoordinatorV2: AddressLike,
    entranceFee: BigNumberish,
    gasLane: BytesLike,
    callbackGasLimit: BigNumberish,
    subscriptionId: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      vrfCoordinatorV2,
      entranceFee,
      gasLane,
      callbackGasLimit,
      subscriptionId,
      interval,
      overrides || {}
    ) as Promise<
      Raffle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Raffle__factory {
    return super.connect(runner) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Raffle {
    return new Contract(address, _abi, runner) as unknown as Raffle;
  }
}
